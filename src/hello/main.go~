package main

import (
	_"base64"
	"crypto/aes"
	_"crypto/cipher"
	_"encoding/base64"
	"encrypt"
	"fmt"
	"html/template"
	"io/ioutil"
	"net/http"
)

type Page struct {
	Title string
	Body  []byte
}

func loadPage(title string) (*Page, error) {
	filename := title + ".txt"
	body, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	return &Page{Title: title, Body: body}, nil
}

func viewHandler(w http.ResponseWriter, r *http.Request) {
	title := r.URL.Path[len("/view/"):]
	p, err := loadPage(title)
	if err != nil {
		fmt.Fprintf(w, "error")
	} else {
		fmt.Fprintf(w, "%s\n %s", p.Title, p.Body)
	}
}
func editHandler(w http.ResponseWriter, r *http.Request) {
	title := r.URL.Path[len("/edit/"):]
	p, err := loadPage(title)
	if err != nil {
		p = &Page{Title: title}
	} else {
		t, _ := template.ParseFiles("edit.html")
		t.Execute(w, p)
	}
}
func (p *Page) save() error {
	filename := p.Title + ".txt"
	return ioutil.WriteFile(filename, p.Body, 0600)
}

func saveHandler(w http.ResponseWriter, r *http.Request) {
	title := r.URL.Path[len("/save/"):]
	body := r.FormValue("body")
	p := &Page{Title: title, Body: []byte(body)}
	p.save()
	http.Redirect(w, r, "/view/"+title, http.StatusFound)
}

func main() {
	//key := []byte("H\xDE\xD9\xFF\x1D\xD37\xC8\xF1N\x00y\xF6\xE9\xCE\xF3")
	//plaintext := []byte("123456")
	  input := []byte("this is a test")
  iv := []byte("532b6195636c6127")[:aes.BlockSize]
  key := []byte("532b6195636c61279a010000")
encrypted := make([]byte, len(input))
	encrypt.EncryptAES(encrypted, input, key, iv)
	fmt.Println(string(encrypted))
	encrypt.DecryptAES(encrypted, input, key, iv)
	fmt.Println(string(encrypted))
	http.HandleFunc("/view/", viewHandler)
	http.HandleFunc("/edit/", editHandler)
	http.HandleFunc("/save/", saveHandler)
	http.ListenAndServe(":8080", nil)
}
